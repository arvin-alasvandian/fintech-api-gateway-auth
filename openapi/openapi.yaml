openapi: 3.0.3
info:
  title: Fintech API Gateway
  version: 0.2.0
  description: >
    Auth-enabled API gateway skeleton. JWT access tokens + refresh tokens.
    Health/readiness endpoints for k8s, Redis/Postgres dependencies, and admin-only probe.

servers:
  - url: http://localhost:8080

tags:
  - name: health
  - name: auth
  - name: users
  - name: admin

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ProblemDetails:
      type: object
      properties:
        type: { type: string, example: "about:blank" }
        title: { type: string, example: "Bad Request" }
        status: { type: integer, example: 400 }
        detail: { type: string, example: "Invalid credentials" }
        instance: { type: string, example: "/v1/auth/login" }
      required: [title, status]

    Ok:
      type: object
      properties:
        ok:
          type: boolean
          example: true
      required: [ok]

    Ready:
      type: object
      properties:
        ready:
          type: boolean
          example: true
      required: [ready]

    UserPublic:
      type: object
      properties:
        id: { type: string, example: "cmf2jzder000011u2sczighva" }
        email: { type: string, format: email }
        role:
          type: string
          enum: [customer, merchant, admin]
        createdAt:
          type: string
          format: date-time
      required: [id, email, role, createdAt]

    RegisterRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password:
          type: string
          format: password
          minLength: 8
        role:
          type: string
          description: "Defaults to 'customer' if omitted"
          enum: [customer, merchant]
      required: [email, password]

    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
      required: [email, password]

    Tokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
      required: [accessToken, refreshToken]

    RefreshRequest:
      type: object
      properties:
        refreshToken: { type: string }
      required: [refreshToken]

    LogoutRequest:
      type: object
      properties:
        refreshToken: { type: string }
      required: [refreshToken]

paths:
  /healthz:
    get:
      tags: [health]
      summary: Liveness probe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }

  /readyz:
    get:
      tags: [health]
      summary: Readiness probe (checks DB/Redis)
      responses:
        "200":
          description: Ready
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ready" }

  /v1/auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RegisterRequest" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPublic" }
        "409":
          description: Email already exists
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }

  /v1/auth/login:
    post:
      tags: [auth]
      summary: Login and receive access/refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: Tokens
          headers:
            X-RateLimit-Limit:
              description: "Login rate limit per minute"
              schema: { type: integer, example: 5 }
            X-RateLimit-Remaining:
              description: "Remaining attempts in current window"
              schema: { type: integer, example: 4 }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tokens" }
        "401":
          description: Invalid credentials
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }
        "429":
          description: Too many login attempts
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }

  /v1/auth/refresh:
    post:
      tags: [auth]
      summary: Exchange a refresh token for a new access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RefreshRequest" }
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                required: [accessToken]
        "400":
          description: Bad or expired refresh token
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }

  /v1/auth/logout:
    post:
      tags: [auth]
      summary: Invalidate a refresh token (logout)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LogoutRequest" }
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }

  /v1/me:
    get:
      tags: [users]
      summary: Get current user (requires Bearer token)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPublic" }
        "401":
          description: Missing/invalid token
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }

  /v1/admin/ping:
    get:
      tags: [admin]
      summary: Admin-only ping
      description: Requires a JWT with `role=admin`.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }
        "401":
          description: Missing/invalid token
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/ProblemDetails" }
